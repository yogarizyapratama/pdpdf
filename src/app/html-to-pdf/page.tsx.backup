'use client'

import { useState } from 'react'
import { Globe, Download, Eye, Code, FileText, Settings } from 'lucide-react'
import Header from '@/components/Header'
import Footer from '@/components/Footer'
import AdBanner from '@/components/AdBanner'

export default function HTMLToPDFPage() {
  const [htmlContent, setHtmlContent] = useState('')
  const [url, setUrl] = useState('')
  const [inputMethod, setInputMethod] = useState<'html' | 'url'>('html')
  const [isProcessing, setIsProcessing] = useState(false)
  const [downloadUrl, setDownloadUrl] = useState<string | null>(null)
  const [showPreview, setShowPreview] = useState(false)
  const [showAdModal, setShowAdModal] = useState(false)
  const [options, setOptions] = useState({
    pageSize: 'A4',
    orientation: 'portrait',
    margin: '1cm',
    includeBackground: true,
    waitForLoad: true
  })

  const processHTMLToPDF = async () => {
    if (inputMethod === 'html' && !htmlContent.trim()) return
    if (inputMethod === 'url' && !url.trim()) return

    // Show ad modal before processing
    setShowAdModal(true)
    
    setTimeout(async () => {
      setShowAdModal(false)
      setIsProcessing(true)

      try {
        // For now, create a basic PDF with the HTML content as text
        const { PDFDocument, rgb, StandardFonts } = await import('pdf-lib')
        
        const pdfDoc = await PDFDocument.create()
        const page = pdfDoc.addPage()
        const font = await pdfDoc.embedFont(StandardFonts.Helvetica)
        
        let content = ''
        if (inputMethod === 'html') {
          // Strip HTML tags and get text content
          const tempDiv = document.createElement('div')
          tempDiv.innerHTML = htmlContent
          content = tempDiv.textContent || tempDiv.innerText || ''
        } else {
          content = `Website URL: ${url}\nContent will be captured from the URL.`
        }
        
        // Parse margin from options (convert cm to points)
        function parseMargin(marginStr: string): number {
          if (!marginStr || marginStr === '0') return 0;
          if (marginStr.endsWith('cm')) {
            const cm = parseFloat(marginStr);
            return cm * 28.3465; // 1cm = 28.3465pt
          }
          return parseFloat(marginStr);
        }

        const fontSize = 12;
        const margin = parseMargin(options.margin);
        const lineHeight = fontSize * 1.2;

        let currentPage = page;
        const { width, height } = currentPage.getSize();
        let yPosition = height - margin;
        let currentLine = '';
        const words = content.split(' ');

        for (const word of words) {
          const testLine = currentLine + (currentLine ? ' ' : '') + word;
          const textWidth = font.widthOfTextAtSize(testLine, fontSize);

          if (textWidth < width - (margin * 2)) {
            currentLine = testLine;
          } else {
            if (currentLine) {
              currentPage.drawText(currentLine, {
                x: margin,
                y: yPosition,
                size: fontSize,
                font,
                color: rgb(0, 0, 0)
              });
              yPosition -= lineHeight;
            }
            currentLine = word;
          }

          // Add new page if needed
          if (yPosition < margin) {
            currentPage = pdfDoc.addPage([width, height]);
            yPosition = height - margin;
          }
        }

        // Draw remaining text
        if (currentLine) {
          currentPage.drawText(currentLine, {
            x: margin,
            y: yPosition,
            size: fontSize,
            font,
            color: rgb(0, 0, 0)
          });
        }
        
        const pdfBytes = await pdfDoc.save()
        const pdfBlob = new Blob([pdfBytes], { type: 'application/pdf' })
        
        const pdfUrl = URL.createObjectURL(pdfBlob)
        setDownloadUrl(pdfUrl)
        
      } catch (error) {
        console.error('Error converting HTML to PDF:', error)
        alert('Error converting to PDF. Please check your HTML/URL and try again.')
      } finally {
        setIsProcessing(false)
      }
    }, 3000)
  }

  const handlePreview = () => {
    if (inputMethod === 'html' && htmlContent.trim()) {
      setShowPreview(true)
    }
  }

  return (
    <>
      <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
        <Header />
        
        <main className="flex-1 container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className="text-center mb-8">
              <div className="flex justify-center mb-4">
                <div className="p-4 bg-indigo-100 dark:bg-indigo-900 rounded-full">
                  <Globe className="h-12 w-12 text-indigo-600 dark:text-indigo-400" />
                </div>
              </div>
              <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
                HTML to PDF
              </h1>
              <p className="text-xl text-gray-600 dark:text-gray-300">
                Convert HTML content or web pages to professional PDF documents
              </p>
            </div>

            {/* Input Method Selection */}
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-8">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Choose Input Method
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button
                  onClick={() => setInputMethod('html')}
                  className={`p-6 rounded-lg border-2 transition-colors ${
                    inputMethod === 'html'
                      ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-950/20'
                      : 'border-gray-200 dark:border-gray-600 hover:border-indigo-300'
                  }`}
                >
                  <Code className="h-8 w-8 text-indigo-600 dark:text-indigo-400 mx-auto mb-3" />
                  <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                    HTML Code
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300">
                    Paste your HTML content directly
                  </p>
                </button>

                <button
                  onClick={() => setInputMethod('url')}
                  className={`p-6 rounded-lg border-2 transition-colors ${
                    inputMethod === 'url'
                      ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-950/20'
                      : 'border-gray-200 dark:border-gray-600 hover:border-indigo-300'
                  }`}
                >
                  <Globe className="h-8 w-8 text-indigo-600 dark:text-indigo-400 mx-auto mb-3" />
                  <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                    Website URL
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300">
                    Convert any webpage to PDF
                  </p>
                </button>
              </div>
            </div>

            {/* HTML Input */}
            {inputMethod === 'html' && (
              <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-8">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    HTML Content
                  </h3>
                  {htmlContent.trim() && (
                    <button
                      onClick={handlePreview}
                      className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                    >
                      <Eye className="h-4 w-4" />
                      <span>Preview</span>
                    </button>
                  )}
                </div>
                
                <textarea
                  value={htmlContent}
                  onChange={(e) => setHtmlContent(e.target.value)}
                  placeholder="<!DOCTYPE html>
<html>
<head>
    <title>My Document</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #333; }
    </style>
</head>
<body>
    <h1>Hello World!</h1>
    <p>This is my HTML content that will be converted to PDF.</p>
</body>
</html>"
                  className="w-full h-64 px-4 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg font-mono text-sm resize-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
                
                <div className="mt-4 p-4 bg-indigo-50 dark:bg-indigo-950/20 rounded-lg">
                  <h4 className="font-medium text-indigo-900 dark:text-indigo-100 mb-2">
                    💡 HTML Tips
                  </h4>
                  <ul className="text-sm text-indigo-700 dark:text-indigo-300 space-y-1">
                    <li>• Include complete HTML with DOCTYPE, head, and body tags</li>
                    <li>• Use inline CSS for best compatibility</li>
                    <li>• Avoid external resources that may not load</li>
                    <li>• Use web-safe fonts for consistent rendering</li>
                  </ul>
                </div>
              </div>
            )}

            {/* URL Input */}
            {inputMethod === 'url' && (
              <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-8">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                  Website URL
                </h3>
                
                <input
                  type="url"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder="https://example.com"
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
                
                <div className="mt-4 p-4 bg-indigo-50 dark:bg-indigo-950/20 rounded-lg">
                  <h4 className="font-medium text-indigo-900 dark:text-indigo-100 mb-2">
                    🌐 URL Tips
                  </h4>
                  <ul className="text-sm text-indigo-700 dark:text-indigo-300 space-y-1">
                    <li>• Make sure the URL is publicly accessible</li>
                    <li>• Include the protocol (http:// or https://)</li>
                    <li>• Some sites may block PDF conversion tools</li>
                    <li>• Large pages may take longer to process</li>
                  </ul>
                </div>
              </div>
            )}

            {/* PDF Options */}
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-8">
              <div className="flex items-center gap-2 mb-4">
                <Settings className="h-5 w-5 text-gray-600 dark:text-gray-400" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  PDF Options
                </h3>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Page Size */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Page Size
                  </label>
                  <select
                    value={options.pageSize}
                    onChange={(e) => setOptions({...options, pageSize: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-indigo-500"
                  >
                    <option value="A4">A4</option>
                    <option value="A3">A3</option>
                    <option value="A5">A5</option>
                    <option value="Letter">Letter</option>
                    <option value="Legal">Legal</option>
                  </select>
                </div>

                {/* Orientation */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Orientation
                  </label>
                  <select
                    value={options.orientation}
                    onChange={(e) => setOptions({...options, orientation: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-indigo-500"
                  >
                    <option value="portrait">Portrait</option>
                    <option value="landscape">Landscape</option>
                  </select>
                </div>

                {/* Margin */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Margin
                  </label>
                  <select
                    value={options.margin}
                    onChange={(e) => setOptions({...options, margin: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-indigo-500"
                  >
                    <option value="0">No margin</option>
                    <option value="0.5cm">0.5cm</option>
                    <option value="1cm">1cm</option>
                    <option value="1.5cm">1.5cm</option>
                    <option value="2cm">2cm</option>
                  </select>
                </div>

                {/* Checkboxes */}
                <div className="space-y-3">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={options.includeBackground}
                      onChange={(e) => setOptions({...options, includeBackground: e.target.checked})}
                      className="mr-3 text-indigo-600"
                    />
                    <span className="text-gray-700 dark:text-gray-300">
                      Include background graphics
                    </span>
                  </label>
                  
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={options.waitForLoad}
                      onChange={(e) => setOptions({...options, waitForLoad: e.target.checked})}
                      className="mr-3 text-indigo-600"
                    />
                    <span className="text-gray-700 dark:text-gray-300">
                      Wait for page to fully load
                    </span>
                  </label>
                </div>
              </div>

              {/* Inline Ad */}
              <div className="mt-6">
                <AdBanner position="middle" />
              </div>
            </div>

            {/* Process Button */}
            <div className="flex justify-center mb-8">
              <button
                onClick={processHTMLToPDF}
                disabled={isProcessing || (inputMethod === 'html' && !htmlContent.trim()) || (inputMethod === 'url' && !url.trim())}
                className="flex items-center space-x-3 px-8 py-4 bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors text-lg font-medium"
              >
                <FileText className="h-6 w-6" />
                <span>
                  {isProcessing ? 'Converting to PDF...' : 'Convert to PDF'}
                </span>
              </button>
            </div>

            {/* Download Link */}
            {downloadUrl && (
              <div className="bg-green-50 dark:bg-green-950/20 rounded-lg p-6 text-center mb-8">
                <h3 className="text-lg font-semibold text-green-900 dark:text-green-100 mb-4">
                  PDF Created Successfully!
                </h3>
                <a
                  href={downloadUrl}
                  download="converted.pdf"
                  className="inline-flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors"
                >
                  <Download className="h-5 w-5" />
                  <span>Download PDF</span>
                </a>
              </div>
            )}

            {/* Info Section */}
            <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                How HTML to PDF Works
              </h3>
              <ol className="list-decimal list-inside space-y-2 text-gray-600 dark:text-gray-300">
                <li>Choose between HTML code or website URL input</li>
                <li>Enter your HTML content or webpage URL</li>
                <li>Configure PDF options (page size, orientation, margins)</li>
                <li>Click &quot;Convert to PDF&quot; to start processing</li>
                <li>Download your generated PDF document</li>
              </ol>
              
              <div className="mt-6 p-4 bg-green-50 dark:bg-green-950/20 rounded-lg">
                <h4 className="font-medium text-green-900 dark:text-green-100 mb-2">
                  🔒 Privacy & Security
                </h4>
                <p className="text-sm text-green-700 dark:text-green-300">
                  HTML processing happens securely in your browser. Your content is never stored on our servers.
                </p>
              </div>
            </div>
          </div>
        </main>

        <Footer />
      </div>

      {/* HTML Preview Modal */}
      {showPreview && htmlContent && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-hidden">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                HTML Preview
              </h3>
              <button
                onClick={() => setShowPreview(false)}
                className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              >
                ✕
              </button>
            </div>
            <div className="overflow-auto max-h-[70vh] border border-gray-200 dark:border-gray-600 rounded-lg">
              <iframe
                srcDoc={htmlContent}
                className="w-full h-96 bg-white"
                title="HTML Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Ad Modal */}
      {showAdModal && (
        <AdBanner position="bottom"  />
      )}
    </>
  )
}
